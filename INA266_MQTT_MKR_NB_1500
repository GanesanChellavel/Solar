#include <MKRNB.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <INA226_WE.h>   

#define I2C_ADDRESS 0x40
const char apn[] = "smiot";
const char gprsUser[] = "";
const char gprsPass[] = "";

const char broker[] = "test.mosquitto.org";
const int port = 1883;
const char topic[] = "test";

float shuntVoltage_mV = 0.0;
float loadVoltage_V = 0.0;
float busVoltage_V = 0.0;
float current_mA = 0.0;
float power_mW = 0.0;



NB nbAccess;
GPRS gprs;
NBClient nbClient;
PubSubClient client(nbClient);

const char* device_id = "ESP_555555";

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Connecting to broker...");
    if (client.connect("MKR_NB1500")) {
      Serial.println("Connected to broker");
      //client.subscribe("inTopic");
    } else {
      Serial.print("Failed to connect, rc=");
      Serial.print(client.state());
      Serial.println(" retrying in 5 seconds");
      delay(5000);
    }
  }
}
INA226_WE ina226 = INA226_WE(I2C_ADDRESS);


void setup() {
  Serial.begin(115200);
  Wire.begin();
  ina226.init();
  ina226.setResistorRange(0.1, 1.3); // choose resistor 0.1 Ohm and gain range up to 1.3A
 
  ina226.setCorrectionFactor(0.93);
 
  Serial.println(" INA226 Current Sensor Example Sketch - Continuous");
 
  ina226.waitUntilConversionCompleted(); //if you comment this line the first data might be zero

  while (!Serial) {}

  Serial.println("Starting modem...");
  if (!nbAccess.begin(apn, gprsUser, gprsPass)) {
    Serial.println("Failed to connect to network");
    while (true);
  }
  
  Serial.println("Connected to network");
  client.setServer(broker, port);
  client.setCallback(callback);

  reconnect();

  if (client.publish(topic, "Hello from MKR NB 1500")) {
    Serial.println("Message published");
  } else {
    Serial.println("Publish failed");
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  static unsigned long lastPublishTime = 0;
  unsigned long currentMillis = millis();
  if (currentMillis - lastPublishTime >= 5000) {
    lastPublishTime = currentMillis;
    
   ina226.readAndClearFlags();
  shuntVoltage_mV = ina226.getShuntVoltage_mV();
  busVoltage_V = ina226.getBusVoltage_V();
  current_mA = ina226.getCurrent_mA();
  power_mW = ina226.getBusPower();
  loadVoltage_V  = busVoltage_V + (shuntVoltage_mV / 1000);
 
 delay(3000);
  // Create a JSON document
    StaticJsonDocument<300> doc;
    doc["Voltage [V]:"] = busVoltage_V;
    doc["Current[mA]:"] = current_mA; // Random temperature between 20 and 30
    doc["Power [mW]:"] = power_mW; 
    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);
    Serial.println(jsonBuffer);

    client.publish(topic, jsonBuffer);
    Serial.println("Message published: ");
    Serial.println(jsonBuffer);
  }
}
